import pandas as pd
import numpy as np
from pandas.tseries.offsets import MonthEnd

# Fonction pour générer un grand DataFrame simulé
def generate_large_dataframe(num_clients=100000, start_date='2023-09-30', end_date='2024-12-31'):
    # Créer une plage de dates de fin de mois
    dates = pd.date_range(start=start_date, end=end_date, freq='M')
    
    # Créer un DataFrame avec toutes les combinaisons de clients et de dates
    clients = np.arange(1, num_clients + 1)
    df = pd.DataFrame([(client, date) for client in clients for date in dates],
                      columns=['id', 'date_fin_mois'])
    
    # Ajouter des colonnes 'year' et 'month' pour faciliter le tri
    df['year'] = df['date_fin_mois'].dt.year
    df['month'] = df['date_fin_mois'].dt.month
    
    # Ajouter une colonne 'flag' simulée avec 20 % de défauts ('y')
    df['flag'] = np.random.choice(['n', 'y'], size=len(df), p=[0.80, 0.20])
    
    return df

# Fonction pour calculer target_next (1 si au moins un défaut dans les 12 mois suivants, sinon 0)
def calculate_target_next(df):
    # Trier les données par id, année et mois
    df = df.sort_values(['id', 'year', 'month'])
    
    # Convertir la colonne 'flag' en 'target' (0 pour 'n', 1 pour 'y')
    df['target'] = df['flag'].map({'n': 0, 'y': 1})
    
    # Calculer target_next (1 si au moins un défaut dans les 12 mois suivants, sinon 0)
    df['target_next'] = (
        df.iloc[::-1]  # Inverser le DataFrame pour calculer les mois suivants
        .groupby('id')['target']  # Grouper par client
        .rolling(12, closed='both')  # Fenêtre glissante de 12 mois (inclut le mois actuel)
        .max()  # Utiliser max() pour obtenir 1 si au moins un défaut est présent
        .reset_index(level=0, drop=True)  # Supprimer l'index multi-niveau
        .iloc[::-1]  # Ré-inverser pour rétablir l'ordre original
    )
    
    # Gérer les cas où il n'y a pas 12 mois de données suivantes
    df.loc[df['target_next'].isna(), 'target_next'] = pd.NA
    
    return df

# Générer un grand DataFrame simulé
print("Génération du DataFrame...")
df = generate_large_dataframe(num_clients=100)  # 100 000 clients pour un DataFrame volumineux
print(f"Taille du DataFrame : {len(df)} lignes")

# Calculer target_next
print("Calcul de la colonne 'target_next'...")
df = calculate_target_next(df)

# Sauvegarder le résultat (optionnel)
# df.to_parquet('resultat.parquet', index=False)

# Afficher un échantillon du résultat
