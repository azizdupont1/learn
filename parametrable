__init__.py
from .anonymization import (
    anonymize_dataframe,
    get_deanonymization_function,
)

____________________________ setup.py

from setuptools import setup, find_packages

setup(
    name="anonymization_module",
    version="0.1",
    packages=find_packages(),
    install_requires=[
        "cryptography",
        "pandas",
        "python-dotenv",
    ],
)
________________________
cd /project/secure_folder
pip install -e .

______________________________
import os
import json
import pandas as pd
from cryptography.fernet import Fernet
import hmac
import hashlib
from dotenv import load_dotenv, set_key, dotenv_values
from pathlib import Path
import importlib.resources as pkg_resources
import anonymization_module  # Import du package

# Déterminer le chemin du fichier .env et du fichier de correspondance
env_file = Path(pkg_resources.files(anonymization_module) / ".env")
mapping_file = Path(pkg_resources.files(anonymization_module) / "mapping_tables_encrypted.json")

# Vérifier et créer le fichier .env si nécessaire
if not os.path.exists(env_file):
    # Créer un fichier .env vide
    with open(env_file, "w") as f:
        pass
    print("Fichier .env créé.")

# Charger les variables d'environnement
env_vars = dotenv_values(env_file)

# Vérifier si les clés existent dans .env
if "FERNET_KEY" not in env_vars or "HMAC_KEY" not in env_vars:
    # Générer une clé Fernet
    fernet_key = Fernet.generate_key().decode()  # Convertir en chaîne pour le stockage

    # Générer une clé HMAC
    hmac_key = os.urandom(32).hex()  # Générer 32 bytes aléatoires et convertir en hexadécimal

    # Enregistrer les clés dans .env
    set_key(env_file, "FERNET_KEY", fernet_key)
    set_key(env_file, "HMAC_KEY", hmac_key)

    print("Nouvelles clés générées et enregistrées dans .env.")
else:
    print("Les clés existent déjà dans .env.")

# Charger les clés depuis .env
load_dotenv(env_file)
fernet_key = os.getenv("FERNET_KEY").encode()
hmac_key = bytes.fromhex(os.getenv("HMAC_KEY"))

# Initialiser Fernet
cipher_suite = Fernet(fernet_key)

def encrypt_symmetric(data):
    return cipher_suite.encrypt(data.encode()).decode()

def decrypt_symmetric(data):
    return cipher_suite.decrypt(data.encode()).decode()

def anonymize_hash(data):
    return hmac.new(hmac_key, data.encode(), hashlib.sha256).hexdigest()[:10]

def anonymize_dataframe(df):
    required_columns = ["nc", "id_cl", "nom_cl", "code_ag", "nom_ag"]
    if not all(col in df.columns for col in required_columns):
        raise ValueError(f"Le DataFrame doit contenir : {required_columns}")

    mapping_tables = {"nc": {}, "id_cl": {}, "code_ag": {}}
    df_anonymized = df.copy()

    for col in ["nc", "id_cl", "code_ag"]:
        df_anonymized[col] = df[col].apply(lambda x: mapping_tables[col].setdefault(x, anonymize_hash(x)))

    df_anonymized["nom_cl"] = df["nom_cl"].apply(encrypt_symmetric)
    df_anonymized["nom_ag"] = df["nom_ag"].apply(encrypt_symmetric)

    try:
        with open(mapping_file, "wb") as f:
            encrypted_mapping = cipher_suite.encrypt(json.dumps(mapping_tables).encode())
            f.write(encrypted_mapping)
        print("Fichier de correspondance chiffré sauvegardé.")
    except Exception as e:
        print(f"Erreur de sauvegarde : {e}")
        raise
    
    return df_anonymized

def get_deanonymization_function():
    try:
        with open(mapping_file, "rb") as f:
            decrypted_mapping = cipher_suite.decrypt(f.read()).decode()
            mapping_tables = json.loads(decrypted_mapping)
        print("Fichier de correspondance chargé et déchiffré.")
    except Exception as e:
        print(f"Erreur de chargement : {e}")
        raise

    def deanonymize_dataframe(df_anonymized):
        df_deanonymized = df_anonymized.copy()
        df_deanonymized["nom_cl"] = df_anonymized["nom_cl"].apply(decrypt_symmetric)
        df_deanonymized["nom_ag"] = df_anonymized["nom_ag"].apply(decrypt_symmetric)
        for col in ["nc", "id_cl", "code_ag"]:
            reverse_mapping = {v: k for k, v in mapping_tables[col].items()}
            df_deanonymized[col] = df_anonymized[col].map(reverse_mapping)
        return df_deanonymized

    return deanonymize_dataframe

_______________________ applicable 
import pandas as pd
from anonymization_module import anonymize_dataframe, get_deanonymization_function
